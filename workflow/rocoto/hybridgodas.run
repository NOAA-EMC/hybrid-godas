#!/bin/bash
set -e
set -u

#================================================================================
#================================================================================
# NCEP Hybrid-GODAS  -  hybridgodas.runstep
#   Using a supplied configuration file, generates a rocoto xml file
#   that is then used to launch the jobs for the hybrid-GODAS
#================================================================================
cycle=0

# get  command line arguments
printHelp(){ 
    echo "hybridgodas.run < --cycle sleep_min >"
    exit 1
}

i=1
while [[ "$i" -le "$#" ]]; do
    case ${!i} in
	--cycle) 
	    i=$(($i+1)); if [[ "$i" -gt "$#" ]]; then printHelp;fi; 
	    cycle=${!i};;
	*)
	    echo "ERROR: illegal command argument ${!i}"
	    printHelp
	    ;;
    esac
    i=$(($i+1))
done


# determine the experiment directory
#  (should be the same directory this file, or a link to the file, is in)
exp_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
exp_dir="$(readlink -f $exp_dir)"

# other configurables
config_file="$exp_dir/config/hybridgodas.config"
rocoto_file="$exp_dir/cycle/rocoto/hybridgodas.rocoto.xml"
rocoto_db="$exp_dir/cycle/rocoto/hybridgodas.rocoto.db"


runstep() {
    # load in system configuration
    # first we need the ROOT_DIR directory from the exp config.
    # we do it weird like this because we want duplicated variables in the 
    # experiment configuration to override the system configurtion
    ROOT_DIR=$(source $config_file; echo $ROOT_DIR)
    source $ROOT_DIR/config/env

    # Load in experiment configuration
    source $config_file
    rocoto_template="$ROOT_DIR/run/rocoto/hybridgodas.template.xml"


    # determine if the rocoto xml file needs to be regnerated
    #  &make_xml will be set to 1 if a new file is to be generated
    #------------------------------------------------------------
    mkdir -p cycle/rocoto

    make_xml=0
    if [[ ! -f "$rocoto_file" ]]; then
	# if rocoto xml file is missing
	make_xml=1
    else
	# if rocoto xml file is older than
	# 1) the main config file
	# 2) the template xml file
	d0=($(stat --printf="%Y" $rocoto_file))
	d1=($(stat --printf="%Y" $config_file))
	d2=($(stat --printf="%Y" $rocoto_template))
	if [[ $d1 -gt $d0 || $d2 -gt $d0 ]]; then 
	    make_xml=1
	fi  
    fi


    # If a new XML file needs to be generated
    #------------------------------------------------------------
    if [[ "$make_xml" -eq 1 ]]; then
	echo "Generating new ROCOTO XML file..."
	
	# turn sections of the template xml file on or off 
	# depending on what DA mode we want
	#------------------------------------------------------------
	export IF_S_3DVAR="<!--";    export IF_E_3DVAR="-->"
	export IF_S_LETKF="<!--";    export IF_E_LETKF="-->"
	export IF_S_HYB="<!--";      export IF_E_HYB="-->"
	export IF_S_3DVAR_HYB="";    export IF_E_3DVAR_HYB=""

	if [[ "$DA_MODE" == "none" ]]; then
	    echo " data assimilation mode: NONE"
	    if [[ "$ENS_SIZE" -gt 1 ]]; then
		echo "ERROR: ENS_SIZE must equal 1 if not doing DA"
		exit 1
	    fi

	elif [[ "$DA_MODE" == "var" ]]; then
	    echo " data assimilation mode: 3DVar only"
	    if [[ "$ENS_SIZE" -gt 1 ]]; then
		echo "ERROR: ENS_SIZE must equal 1 for 3DVAR mode"
		exit 1
	    fi
	    export IF_S_3DVAR="";	export IF_E_3DVAR=""
	    export IF_S_3DVAR_HYB="<!--";
	    export IF_E_3DVAR_HYB="-->";

	elif [[ "$DA_MODE" == "ekf" ]]; then
	    echo " data assimilation mode: LETKF only"
	    if [[ "$ENS_SIZE" -lt 3 ]]; then
		echo "ERROR: ENS_SIZE must be >= 3 for LETKF mode"
		exit 1
	    fi
	    export IF_S_LETKF="";	export IF_E_LETKF=""

	elif [[ "$DA_MODE" == "hyb" ]]; then
	    echo " data assimilation mode: 3DVar/LETKF hybrid"
	    if [[ "$ENS_SIZE" -lt 3 ]]; then
		echo "ERROR: ENS_SIZE must be >= 3 for HYBRID mode"
		exit 1
	    fi
	    export IF_S_3DVAR="";	export IF_E_3DVAR=""
	    export IF_S_LETKF="";	export IF_E_LETKF=""
	    export IF_S_HYB="";	export IF_E_HYB=""

	else
	    echo "incorrect DA_MODE setting, should be one of none/var/ekf/hyb"
	    exit 1
	fi
	#------------------------------------------------------------

	# determine the ensemble list (there will be an extra "ensemble" member if we are 
	#  doing a forecast from the ensemble mean)       
	if [[ $DA_MODE == "hyb" || $DA_MODE == "ekf" ]]; then
	    export ENS_LIST_DA="$(seq -s ' ' -f "%04g" 1 $ENS_SIZE)"
	    ENS_LIST_FCST="0000 "
	else
	    export ENS_LIST_DA="0000"
	    ENS_LIST_FCST=""
	fi
	export ENS_LIST_FCST="${ENS_LIST_FCST}$ENS_LIST_DA"

	
	# CYCLEDEF tells rocoto what cycles to run
	# If we are to handle leap days specially (such as 6 day pentads), need to do extra logic...
	# TODO, use the leapday logic in the jobwrapper.sh script?
	if [[ $CYCLE_LEAPADJ -eq 0 ]]; then
	    export CYCLEDEF="<cycledef>${CYCLE_START}00 ${CYCLE_END}00 ${CYCLE_LEN}:00:00</cycledef>"
	else
	    CYCLEDEF=""
	    export TZ=UTC
	    dtz() { echo ${1:0:8}Z${1:8:10}; }
	    sdate=$CYCLE_START
	    cdate=$sdate
	    while [[ $cdate -lt $CYCLE_END ]]; do
		ndate=$(date "+%Y%m%d%H" -d "$(dtz $cdate) + $CYCLE_LEN hours")

		# is this a leap year?
		[[ $(date "+%m%d" -d "${cdate:0:4}0228 + 1 day") = "0229" ]] && leap=1 || leap=0
		if [[ $leap = 1 ]]; then
		    # yes.. check to see if we need to add another date
		    ld=${cdate:0:4}0229
		    if [[ ${cdate:0:8} -lt $ld && ${ndate:0:8} -ge $ld ]]; then
			#yep, leap day, adjust accordingly
			ndate=$(date "+%Y%m%d%H" -d "$(dtz $ndate) + 1 day")
			CYCLEDEF="""$CYCLEDEF
<cycledef>${sdate}00 ${cdate}00 ${CYCLE_LEN}:00:00</cycledef>
<cycledef>${cdate}00 ${ndate}00 $((${CYCLE_LEN} + 24)):00:00</cycledef>"""
			sdate=$ndate
		    fi
		fi
		cdate=$ndate
	    done
	    export CYCLEDEF="$CYCLEDEF
<cycledef>${sdate}00 ${cdate}00 ${CYCLE_LEN}:00:00</cycledef>"
	fi

	# TODO, use the logic that is in the jobwrapper.sh script already?
	DA_SLOT_NUM=$(( $CYCLE_LEN / $DA_SLOT_LEN ))
	ss=$(( $DA_WNDW_OFST - $CYCLE_LEN + $DA_SLOT_LEN/2 ))
	se=$(( $ss + $DA_SLOT_LEN*($DA_SLOT_NUM-1) ))
	export DA_SLOTS=$(seq -s ' ' -f "%+02g" $ss $DA_SLOT_LEN $se)

	# All done defining variables, generate the rocoto XML file that is used to manage the jobs
	cat $rocoto_template | envsubst > $rocoto_file
    fi


    # If this is the first time running, create a timestamp file of the NEXT cycle that should run
    # (Needed because of special logic in the subscripts to handle the leap day issue that rocoto
    #   can't handle on its own)
    if [[ ! -f "$exp_dir/cycle/cycle.status" ]]; then
	mkdir -p $exp_dir/cycle
	echo "ini:$CYCLE_START" > $exp_dir/cycle/cycle.status
    fi
    
    
    # run a rocoto step
    #------------------------------------------------------------
    rocotorun -d $rocoto_db -w $rocoto_file -v 3    
}


if [[ $cycle -eq 0 ]]; then
    echo "Starting a single rocoto step."
    runstep
else
    echo "Hybrid-GODAS: Starting rocoto cycling."
    echo "Run ./hybridgodas.status to get more detailed information of current run status."
    echo "This script will exit when the run cycles have completed."
    echo ""

    prev_time=0
    curr_time=0
    while [[ true ]]; do	    
	( runstep )
	# check to see if we're done with the cycles
	CYCLE_END=$(source $config_file; echo $CYCLE_END)
	if [[ -e cycle/cycle_post.status ]]; then
	    curr_time=$(cat cycle/cycle_post.status)
	    if [[ "$curr_time" -ge $CYCLE_END ]]; then
		echo "All done with cycles."
		exit 0
	    fi
	fi	    

	# are we on to a new cycle? (print out)
	if [[ "$curr_time" -ne "$prev_time" ]]; then
	    echo "finished $curr_time"
	    prev_time=$curr_time
	fi

	# sleep
	sleep ${cycle}m
    done
fi
    
